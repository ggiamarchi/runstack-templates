# -*- mode: ruby -*-
# vi: set ft=ruby :

def symbolize_keys(aHash)
  case aHash
    when Hash
      Hash[
        aHash.map do |key, value|
          [ key.respond_to?(:to_sym) ? key.to_sym : key, symbolize_keys(value) ]
        end
      ]
    when Enumerable
      aHash.map { |value| symbolize_keys(value) }
    else
      aHash
  end
end

machines = symbolize_keys JSON.parse(File.read('machines.json'))

Vagrant.configure("2") do |config|

  config.vm.provider :openstack do |os, override|
    os.username           = ENV['OS_USERNAME']
    os.password           = ENV['OS_PASSWORD']
    os.openstack_auth_url = ENV['OS_AUTH_URL']
    os.tenant_name        = ENV['OS_TENANT_NAME']
    os.region             = ENV['OS_REGION_NAME']
  end

  machines.each do |machine|
    config.vm.define machine[:name] do |m|
      m.vm.provider :openstack do |os, override|
        override.ssh.username = machine[:ssh][:user]
        os.server_name        = machine[:name]
        os.floating_ip_pool   = machine[:floating_ip_pool] if machine.has_key? :floating_ip_pool
        os.flavor             = machine[:flavor]
        os.image              = machine[:image]
        os.networks           = machine[:networks]
      end
      m.vm.hostname = machine[:name]
      m.vm.provision :shell, inline: 'echo "" >> /etc/hosts'
      machines.each do |host|
        m.vm.provision :shell, inline: "echo '#{host[:networks].first[:address]} #{host[:name]}' >> /etc/hosts"
      end
      unless machine[:shell].nil?
        if machine[:shell][:path].nil?
          if machine[:shell][:args].nil?
            m.vm.provision :shell, privileged: false, inline: machine[:shell][:cmd]
          else
            m.vm.provision :shell, privileged: false, inline: machine[:shell][:cmd], args: machine[:shell][:args]
          end
        else
          if machine[:shell][:args].nil?
            m.vm.provision :shell, privileged: false, path: machine[:shell][:path]
          else
            m.vm.provision :shell, privileged: false, path: machine[:shell][:path], args: machine[:shell][:args]
          end
        end
      end
    end
  end 
end
